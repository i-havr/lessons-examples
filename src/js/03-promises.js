// ===============–ü–ï–†–í–´–ô –ü–†–ò–ú–ï–† –†–ï–ü–ï–¢–´=================
// const promise = new Promise((resolve, reject) => {
//   const canFulfill = Math.random() > 0.5;
//   console.log(canFulfill);

//   setTimeout(() => {
//     if (canFulfill) {
//       resolve('–ü—Ä–æ–º–∏—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–∏—Å–ø–æ–ª–Ω–µ–Ω, fulfilled)');
//     }
//     reject('–ü—Ä–æ–º–∏—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π(–æ—Ç–∫–ª–æ–Ω–µ–Ω, rejected)');
//   }, 1000);
// });

// promise
//   .then(onFulfilled)
//   .then(x => {
//     console.log(x);
//     return 10;
//   })
//   .then(y => {
//     console.log(y);
//   })
//   .catch(error => console.log(error))
//   .finally(() => {
//     console.log('–Ø –±—É–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ');
//   });

// function onFulfilled(result) {
//   console.log(`‚úÖ ${result}`);
// }

// function onRejected(error) {
//   console.log(`‚ùå ${error}`);
// }

// ===============–í–¢–û–†–û–ô –ü–†–ò–ú–ï–† –†–ï–ü–ï–¢–´=================

// const makeOrder = dish => {
//   const DELAY = 1000;

//   return new Promise((resolve, reject) => {
//     const passed = Math.random() > 0.5;

//     setTimeout(() => {
//       if (passed) {
//         resolve(`‚úÖ –í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ: ${dish}`);
//       }
//       reject('‚ùå –£–ø—Å, —É –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç—ã');
//     }, DELAY);
//   });
// };

// makeOrder('–ü–∏—Ä–æ–∂–æ–∫').then(onMakeOrderSuccess).catch(onMakeOrderError);

// function onMakeOrderSuccess(result) {
//   console.log(result);
// }

// function onMakeOrderError(result) {
//   console.log(result);
// }

// ===============–¢–†–ï–¢–ò–ô –ü–†–ò–ú–ï–† –†–ï–ü–ï–¢–´=================

// const fetchPokemonById = id => {
//   return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());
// };

// fetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);
// fetchPokemonById(2).then(onFetchSuccess).catch(onFetchError);
// fetchPokemonById(3).then(onFetchSuccess).catch(onFetchError);

// function onFetchSuccess(pokemon) {
//   console.log('onFetchSuccess -> onFetchSuccess');
//   console.log(pokemon);
// }

// function onFetchError(error) {
//   console.log('onFetchError -> onFetchError');
//   console.log('–≠—Ç–æ –≤ –±–ª–æ–∫–µ catch');
//   console.log(error);
// }

// ===============–ß–ï–¢–í–ï–†–¢–´–ô –ü–†–ò–ú–ï–† –†–ï–ü–ï–¢–´=================

const horses = [
  'Secretariat',
  'Eclipse',
  'West Australian',
  'Flying Fox',
  'Seabiscuit',
];

let raceCounter = 0;

const refs = {
  startBtn: document.querySelector('.js-start-race'),
  winnerField: document.querySelector('.js-winner'),
  progressField: document.querySelector('.js-progress'),
  tableBody: document.querySelector('.js-results-table > tbody'),
};

refs.startBtn.addEventListener('click', onStartButton);

function onStartButton() {
  raceCounter += 1;
  const promises = horses.map(run);

  updateWinnerField('');
  updateProgressField('üê¥ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');
  determineWinner(promises);
  waitForAllHorses(promises);
}

function determineWinner(horsesP) {
  Promise.race(horsesP).then(({ horse, time }) => {
    updateWinnerField(`ü•á –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`);
    updateResultsTable({ horse, time, raceCounter });
  });
}

function waitForAllHorses(horsesP) {
  Promise.all(horsesP).then(() => {
    updateProgressField('üèÅ –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏');
  });
}

function updateWinnerField(message) {
  refs.winnerField.textContent = message;
}

function updateProgressField(message) {
  refs.progressField.textContent = message;
}

function updateResultsTable({ horse, time, raceCounter }) {
  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
  refs.tableBody.insertAdjacentHTML('beforeend', tr);
}

function run(horse) {
  return new Promise((resolve, reject) => {
    const time = getRandomTime(2000, 3500);

    setTimeout(() => {
      resolve({ horse, time });
    }, time);
  });
}

function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
